package com.srk.pkg;

import java.io.*;
import java.util.ArrayList;
import java.util.Random;

import com.srk.pkg.Team;

import javax.json.Json;
import javax.json.JsonObject;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class MyServlet
 */
@WebServlet("/ConnectServlet")
public class ConnectServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private int numberOfActiveUsers = 0;
	private ArrayList<String> activeUsers = new ArrayList<String>();
	private Team team1 = new Team();
	private Team team2 = new Team();

	private static final int MAX_USERS = 2;
	
	
    /**
     * Default constructor. 
     */
    public ConnectServlet() {
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		String uid = request.getParameter("uid");
		if (uid != null && !this.activeUsers.contains(uid)){	/****************/
			activeUsers.add(uid);
			this.numberOfActiveUsers++;

			this.getServletContext().setAttribute("numberOfActiveUsers", this.numberOfActiveUsers);
			this.getServletContext().setAttribute("activeUsers", this.activeUsers);
			
			System.out.println("uid is: " + uid + "\n");
			System.out.println("current # of active users: " + this.activeUsers.size() + "\n");

		}
		
		while (this.activeUsers.size() != MAX_USERS) {
			
		}
		
		if (this.activeUsers.size() == MAX_USERS){
			System.out.println("GOT ENOUGH!!!!");
			//assign teams to the six users
			for (int i=0; i<this.activeUsers.size(); i++){
				Random rand = new Random(System.currentTimeMillis());
			    boolean isInTeam1 = rand.nextBoolean();
			    String todo = this.activeUsers.get(i);
			    
			    if (isInTeam1 && this.team1.getMembers().size()<MAX_USERS/2) 
			    	this.team1.getMembers().add(todo);
			    else this.team2.getMembers().add(todo);
			}
			
			this.team1.setTeamNumber(1);
			this.team2.setTeamNumber(2);
			
			// select a questioning team and the corresponding captain
			team1.setQuestioning(true);
			team1.selectCaptain();
			team2.setQuestioning(false);

			// return information to the user in a json format
			int teamNum;
			Boolean isQuestioning;
			Boolean isCaptain;
			
			if (team1.getMembers().contains(uid)){
				isQuestioning = true;
				teamNum = 1;
				isCaptain = team1.getCaptain().equals(uid);
			} else {
				isQuestioning = false;
				teamNum = 2;
				isCaptain = false;
			}
			
			JsonObject json = Json.createObjectBuilder()
					.add("uid", uid)
					.add("team_num", teamNum)
					.add("is_questioning", isQuestioning)
					.add("is_captain", isCaptain).build();
			
			response.setContentType("application/json");
			PrintWriter out1 = response.getWriter();
			out1.print(json.toString());
			out1.flush();
			
		}
		
	}
	
}

